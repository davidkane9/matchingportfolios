\documentclass{article}
\usepackage{mathtools}
\usepackage{amsfonts}
\usepackage{float}
\usepackage{graphicx}
\usepackage{caption}
\usepackage{Sweave,bbm,amsmath,url}
\usepackage{subcaption}

\begin{document}
\title{Random Portfolios}
\author{Mike Flynn, Angel Zhou, Dave Kane}
\maketitle

\section*{Introduction}

<<libraries, echo = FALSE, warning = FALSE, message = FALSE, error = FALSE, warning = FALSE>>=
library(ggplot2)
library(grid)
library(devtools)
library(base)
library(rgl)
library(wq)
library(reshape2)
load_all("..")
@

Put yourself in a scenario where you have 6,250 dollars. Let's say that you want to invest this money in two stocks: General Electric (GE) and International Business Machines (IBM). There is an endless number of ways that you could split your money into the two stocks. For example, you could invest 25 percent of your 6,250 dollars in GE and the remaining 75 percent in IBM. In another scenario, you could halve your money by putting 3,125 dollars into GE and 3,125 dollars into IBM. The possibilities stretch on.

\begin{figure}[H]
  \begin{subfigure}[b]{0.5\textwidth}
      \centering
      \includegraphics[width=\textwidth]{sharespace}
      \label{fig:sharespace}
  \end{subfigure}
  \begin{subfigure}[b]{0.5\textwidth}
      \centering
      \includegraphics[width=\textwidth]{dollarspace}
      \label{fig:dollarspace}
      \end{subfigure}
\caption{Consider the situation where you invest in 25 shares of IBM and 50 shares of GE. This coordinate, where $x = 25$ and $y = 50$, is displayed on the left plot. This graph thus shows a single portfolio in what is called a share space, meaning that the x and y coordinates represent the amount of shares invested in each stock. Alternatively, one can view the portfolio in dollar terms. This is done by multiplying the stock price by the number of shares, resulting in the total amount spent in each stock. The price of GE is currently at around 25 dollars apiece while the value of each IBM stock is approximately 200 dollars. Thus, 25 shares of IBM becomes 5,000 dollars and 50 shares of GE costs 1,250 dollars. The plot on the right displays the same portfolio as the one on the left, but plots the portfolio in dollar space. This means that the x and y coordinates represent the amount of money that is invested into each respective stock.}
\end{figure}

Now that we have seen portfolios in both share and dollar space, what else is there?
\\
\\
Portion space refers to percentages. Say you spend 30 percent of your money on IBM. In other words, .3 of your total money is invested in IBM. For the rest of this document, we will be referring to portfolios plotted in portion space.

\begin{figure}[H]
  \begin{subfigure}[b]{1.0\textwidth}
    \centering
    \includegraphics[width=\textwidth]{portionspace}
    \label{fig:portionspace}
  \end{subfigure}
\caption{The same portfolio as that in Figure 1 is considered again in the above plot. Instead of share or dollar space, the portfolio (consisting of 25 and 50 shares of IBM and GE respectively) is now shown in portion space. Given that you hypothetically invest 5,000 dollars on IBM and 1,250 dollars on GE, you expend a total of 6,250 dollars (since all of your money was spent, this portfolio is fully invested; no money is put aside for other purposes). $1250/6250 = 0.2$, so 20 percent of your budget is spent in GE. Transitively, 80 percent is put into IBM. These percentages are plotted as decimals.}
\end{figure}

As mentioned before, there is an infinite number of ways to split the invested money. No matter how you divide your total dollar amount, whether you put .5 in IBM and .5 in GE, or .2 in IBM and .8 in GE, the two values must sum to 1, or 100 percent. In other words, every portfolio that we will consider will be fully invested.
\\
\\
In order to visualize how all the possible portfolios would appear in a 2-D space, you can generate random weights, creating a completely arbitrary way of splitting the money. Some constraints that must be followed when generating random weights are as follows: $x + y = 1$ and ${x, y} > 0$.

\begin{figure}[H]
  \begin{subfigure}[b]{0.7\textwidth}
      \centering
      \includegraphics[width=\textwidth]{samples}
      \label{fig:samples}
  \end{subfigure}
\caption{1,000 random samples of General Electric (GE) and International Business Machines (IBM) are taken. Each point represents a possible portfolio. The result is a diagonal line extending from the point (0,1) to the point (1,0). Because x and y must sum to 1, a line is formed where every set of x and y coordinates add up to 1.}
\end{figure}

Let's say that you want to add Coca-Cola (KO) to the stocks that you are investing in. Now that you have three stocks instead of two, you must generate three random weights that sum to 1. To create an example, you could invest .3, .3, and .4 of your total funding in KO, GE, and IBM respectively. 
  
\begin{figure}[H]
<<figChunk1, echo=FALSE, fig.height = 3, fig.width = 5, cache =TRUE, warning = FALSE>>=
Amat2 = matrix(c(1,1,1), nrow = 1, ncol = 3)
b2 = 1

w3 = hitandrun(A = Amat2, b = b2, n = 1000)[[1]]
threeScenPoints = as.data.frame(t(w3))
colnames(threeScenPoints) = c("GE", "IBM", "KO")

p1 <- ggplot(data = threeScenPoints, aes(x = GE, y = IBM))
p1 <- p1 + geom_point(size = 0.5) + scale_y_continuous(breaks = c(0, 0.75)) + scale_x_continuous(breaks = c(0, 0.75)) + theme_bw()

w4 = hitandrun(A = Amat2, b = b2, n = 10000)[[1]]
threeScenPoints2 = as.data.frame(t(w4))
colnames(threeScenPoints2) = c("GE", "IBM", "KO")

scatterTheme1 = theme(
  panel.background = NULL,
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  axis.title.x = element_blank(),
  axis.ticks.x = element_blank(),
  axis.text.x = element_blank(),
  plot.margin = unit(c(0.1,0.1,0.1,1.5), "lines")
)

scatterTheme2 = theme(
  panel.background = NULL,
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  plot.margin = unit(c(0.1,0.1,0.1,1.5), "lines")
)

scatterTheme3 = theme(
  panel.background = NULL,
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  axis.title.y = element_blank(),
  axis.ticks.y = element_blank(),
  axis.text.y = element_blank(),
  plot.margin = unit(c(0.1,0.5,0.1,0.1), "lines")
)

histTheme1 = theme(
  panel.background = element_blank(),
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  panel.border = element_blank(),
  axis.title = element_blank(),
  axis.ticks = element_blank(),
  axis.text = element_blank(),
  plot.margin = unit(c(0.1,0.05,0.1,3.5), "lines")
)

histTheme2 = theme(
  panel.background = element_blank(),
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  panel.border = element_blank(),
  axis.title = element_blank(),
  axis.ticks = element_blank(),
  axis.text = element_blank(),
  plot.margin = unit(c(0.1,0.325,0.1,0), "lines")
)

histTheme3 = theme(
  panel.background = element_blank(),
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  panel.border = element_blank(),
  axis.title.y = element_blank(),
  axis.ticks.y = element_blank(),
  axis.text.y = element_blank(),
  plot.margin = unit(c(0.1,0.1,0.1,0.1), "lines")
)

vp = function(x,y) viewport(layout.pos.row = x, layout.pos.col = y)
grid.newpage()
pushViewport(viewport(layout = grid.layout(3, 3, heights = unit(c(2.4,2.4,3), "cm"), widths = unit(c(4.5,3,3), "cm"))))
##, heights = unit(c(0.5, 5, 5, 5), "null")
p1 <- ggplot(data = threeScenPoints, aes(x = GE, y = KO))
p1 <- p1 + geom_point(size = .05) + scatterTheme2 + scale_y_continuous(breaks = c(0, 0.75)) + scale_x_continuous(breaks = c(0, 0.75))

p2 <- ggplot(data = threeScenPoints, aes(x = GE, y = IBM))
p2 <- p2 + geom_point(size = .05) + scatterTheme1 + scale_y_continuous(breaks = c(0, 0.75)) + scale_x_continuous(breaks = c(0, 0.75))

p3 <- ggplot(data = threeScenPoints, aes(x = IBM, y = KO))
p3 <- p3 + geom_point(size = .05) + scatterTheme3  + scale_x_continuous(breaks = c(0, 0.75))

h1 <- ggplot(data = threeScenPoints2, aes(x = GE))
h1 <- h1 + geom_histogram(binwidth = .125/2, fill = "white", color = "black")
h1 <- h1 + ylab("Counts") + histTheme1

h2 <- ggplot(data = threeScenPoints2, aes(x = IBM))
h2 <- h2 + geom_histogram(binwidth = .125/2, fill = "white", color = "black")
h2 <- h2 + ylab("Counts") + histTheme2

h3 <- ggplot(data = threeScenPoints2, aes(x = KO))
h3 <- h3 + geom_histogram(binwidth = .125/2, fill = "white", color = "black")
h3 <- h3 + ylab("Counts") + histTheme3 + scale_x_continuous(breaks = c(0, 0.75))
print(p1, vp = vp(3,1))
print(p2, vp = vp(2,1))
print(p3, vp = vp(3,2))
print(h1, vp = vp(1,1))
print(h2, vp = vp(2,2))
print(h3, vp = vp(3,3))
@
\caption{1,000 random weights were sampled for Google (GE), Coca-Cola (KO), and International Business Machines (IBM). Once again, these portfolios are all fully invested. The pairwise scatterplots display the same distribution of the 1,000 random weights. According to the plots, the maximum sum for the weight distributions for any two variables is 1, and the minimum sum is 0.
\\
\\
The three histograms on the diagonal represent density plots of 10,000 randomly sampled weights. More samples are taken for the histograms in order to increase their resolution. The histograms display the distributions of the variables and they indicate that the most likely value for any given variable is close to 0.}

\end{figure}

Now let's consider yet another scenario, where you are investing in five different stocks: General Electric (GE), International Business MAchines (IBM), Coca-Cola (KO), General Motors (GM), and Microsoft (MSFT). Like before, the generated portfolios are fully invested. For example, one possible portfolio could consist of the weights 0.2, 0.3, 0.1, 0.15, 0.25 for each respective stock.

\begin{figure}[H]
<<fiveByFiveGrid, echo=FALSE, fig.height = 3, fig.width = 5, cache =TRUE, warning = FALSE>>=
Amat = matrix(c(1,1,1,1,1), nrow = 1, ncol =5)
b = 1

## this sets the random number generator so we can have repeatable results
set.seed(40)

w = hitandrun(A = Amat, b = b, n = 1000)[[1]]
points = as.data.frame(t(w))
colnames(points) = c("GE", "IBM", "KO", "GM", "MSFT")

library(rgl)
scatterTheme1 = theme(
  panel.background = NULL,
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  axis.title.x = element_blank(),
  axis.ticks.x = element_blank(),
  axis.text.x = element_blank(),
  plot.margin = unit(c(0.1,0.1,0.1,0.1), "lines")
)

scatterTheme2 = theme(
  panel.background = NULL,
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  plot.margin = unit(c(0.1,0.1,0.1,0.1), "lines")
)

scatterTheme3 = theme(
  panel.background = NULL,
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  axis.title.y = element_blank(),
  axis.ticks.y = element_blank(),
  axis.text.y = element_blank(),
  plot.margin = unit(c(0.1,0.1,0.1,0.1), "lines")
)

scatterTheme4 = theme(
  panel.background = NULL,
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  panel.border = element_blank(),
  axis.title = element_blank(),
  axis.ticks = element_blank(),
  axis.text = element_blank(),
  plot.margin = unit(c(0.1,0.1,0.1,0.1), "lines")
)

histTheme1 = theme(
  panel.background = element_blank(),
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  panel.border = element_blank(),
  axis.title = element_blank(),
  axis.ticks = element_blank(),
  axis.text = element_blank(),
  plot.margin = unit(c(0.1,0.1,0.1,0.1), "lines")
)

histTheme2 = theme(
  panel.background = element_blank(),
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  panel.border = element_blank(),
  axis.title = element_blank(),
  axis.ticks = element_blank(),
  axis.text = element_blank(),
  plot.margin = unit(c(0.1,0.1,0.1,0.1), "lines")
)

histTheme3 = theme(
  panel.background = element_blank(),
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  panel.border = element_blank(),
  axis.title.y = element_blank(),
  axis.ticks.y = element_blank(),
  axis.text.y = element_blank(),
  plot.margin = unit(c(0.1,0.1,0.1,0.1), "lines")
)

vp = function(x,y) viewport(layout.pos.row = x, layout.pos.col = y)
grid.newpage()
pushViewport(viewport(layout = grid.layout(5, 5, heights = unit(c(2.4,2.4,3), "cm"), widths = unit(c(4.5,3,3), "cm"))))
##, heights = unit(c(0.5, 5, 5, 5), "null")

p1 <- ggplot(data = points, aes(x = GE, y = KO))
p1 <- p1 + geom_point(size = .05) + scatterTheme1 + scale_y_continuous(breaks = c(0, 0.75)) + scale_x_continuous(breaks = c(0, 0.75))

p2 <- ggplot(data = points, aes(x = GE, y = IBM))
p2 <- p2 + geom_point(size = .05) + scatterTheme1 + scale_y_continuous(breaks = c(0, 0.75)) + scale_x_continuous(breaks = c(0, 0.75))

p3 <- ggplot(data = points, aes(x = IBM, y = KO))
p3 <- p3 + geom_point(size = .05) + scatterTheme4 + scale_y_continuous(breaks = c(0, 0.75)) + scale_x_continuous(breaks = c(0, 0.75))

p4 <- ggplot(data = points, aes(x = GE, y = GM))
p4 <- p4 + geom_point(size = .05) + scatterTheme1 + scale_y_continuous(breaks = c(0, 0.75)) + scale_x_continuous(breaks = c(0, 0.75))

p5 <- ggplot(data = points, aes(x = IBM, y = GM))
p5 <- p5 + geom_point(size = .05) + scatterTheme4 + scale_y_continuous(breaks = c(0, 0.75)) + scale_x_continuous(breaks = c(0, 0.75))

p6 <- ggplot(data = points, aes(x = KO, y = GM))
p6 <- p6 + geom_point(size = .05) + scatterTheme4 + scale_y_continuous(breaks = c(0, 0.75)) + scale_x_continuous(breaks = c(0, 0.75))

p7 <- ggplot(data = points, aes(x = GE, y = MSFT))
p7 <- p7 + geom_point(size = .05) + scatterTheme2 + scale_y_continuous(breaks = c(0, 0.75)) + scale_x_continuous(breaks = c(0, 0.75))

p8 <- ggplot(data = points, aes(x = IBM, y = MSFT))
p8 <- p8 + geom_point(size = .05) + scatterTheme3 + scale_y_continuous(breaks = c(0, 0.75)) + scale_x_continuous(breaks = c(0, 0.75))

p9 <- ggplot(data = points, aes(x = KO, y = MSFT))
p9 <- p9 + geom_point(size = .05) + scatterTheme3 + scale_y_continuous(breaks = c(0, 0.75)) + scale_x_continuous(breaks = c(0, 0.75))

p10 <- ggplot(data = points, aes(x = GM, y = MSFT))
p10 <- p10 + geom_point(size = .05) + scatterTheme3 + scale_y_continuous(breaks = c(0, 0.75)) + scale_x_continuous(breaks = c(0, 0.75))

h1 <- ggplot(data = points, aes(x = GE))
h1 <- h1 + geom_histogram(binwidth = .125/4, fill = "white", color = "black")
h1 <- h1 + ylab("Counts") + histTheme1

h2 <- ggplot(data = points, aes(x = IBM))
h2 <- h2 + geom_histogram(binwidth = .125/4, fill = "white", color = "black")
h2 <- h2 + ylab("Counts") + histTheme2

h3 <- ggplot(data = points, aes(x = KO))
h3 <- h3 + geom_histogram(binwidth = .125/4, fill = "white", color = "black")
h3 <- h3 + ylab("Counts") + histTheme2

h4 <- ggplot(data = points, aes(x = GM))
h4 <- h4 + geom_histogram(binwidth = .125/4, fill = "white", color = "black")
h4 <- h4 + ylab("Counts") + histTheme2

h5 <- ggplot(data = points, aes(x = MSFT))
h5 <- h5 + geom_histogram(binwidth = .125/4, fill = "white", color = "black")
h5 <- h5 + ylab("Counts") + histTheme3

##print(p1, vp = vp(2,1))
##print(p2, vp = vp(3,1))
##print(p3, vp = vp(3,2))
##print(p4, vp = vp(4,1))
##print(p5, vp = vp(4,2))
##print(p6, vp = vp(4,3))
##print(p7, vp = vp(5,1))
##print(p8, vp = vp(5,2))
##print(p9, vp = vp(5,3))
##print(p10, vp = vp(5,4))
##print(h1, vp = vp(1,1))
##print(h2, vp = vp(2,2))
##print(h3, vp = vp(3,3))
##print(h4, vp = vp(4,4))
##print(h5, vp = vp(5,5))
@
\end{figure}

\begin{figure}[H]
  \begin{subfigure}[b]{1.0\textwidth}
    \centering
    \includegraphics[width=\textwidth]{5v5}
    \label{fig:5v5}
  \end{subfigure}
\caption{1,000 random weights were sampled for Google (GE), Coca-Cola (KO), International Business Machines (IBM), General Motors (GM), and Microsoft (MSFT).
\\
\\
10,000 weights were randomly sampled for the five histograms. These graphs function as density plots.}
\end{figure}

\section*{hitandrun()}

In order to create the scatterplots and histograms previously shown in this document, random points had to be generated. These points were created using a function called hitandrun(). The algorithm for this function requires several steps:

\begin{figure}[H]
<<hitandrun walkthrough1, echo = FALSE, warning = FALSE>>=
dat <- data.frame(x = .4, y = .6)
p1 <- ggplot(data = dat, aes(x = x, y = y), height = 150, width = 200) + geom_point(size = 3) + simpTheme +
  geom_segment(aes(x = 0, y = 0, xend = .5, yend = sqrt(3)/2)) +
  geom_segment(aes(x = .5, y = sqrt(3)/2, xend = 1, yend = 0)) + 
  geom_segment(aes(x = 1, y = 0, xend = 0, yend = 0))
p1
@
\caption{hitandrun() first picks a random point within a simplex.}
\end{figure}

\begin{figure}[H]
<<hitandrun walkthrough2, echo = FALSE, warning = FALSE>>=
p2 <- ggplot(data = dat, aes(x = x, y = y)) + geom_point(size = 3) + simpTheme +
  geom_segment(aes(x = 0, y = 0, xend = .5, yend = sqrt(3)/2)) +
  geom_segment(aes(x = .5, y = sqrt(3)/2, xend = 1, yend = 0)) + 
  geom_segment(aes(x = 1, y = 0, xend = 0, yend = 0)) + 
  geom_segment(aes(x = .4, y = .6, xend = .386, yend = .625), arrow = arrow(length = unit(.2, "cm")))
p2
@
\caption{The function then chooses a random direction, as shown by the arrow.}
\end{figure}

\begin{figure}[H]
<<hitandrun walkthrough3, echo = FALSE, warning = FALSE>>=
p3 <- ggplot(data = dat, aes(x = x, y = y)) + geom_point(size = 3) + simpTheme +
  geom_segment(aes(x = 0, y = 0, xend = .5, yend = sqrt(3)/2)) +
  geom_segment(aes(x = .5, y = sqrt(3)/2, xend = 1, yend = 0)) + 
  geom_segment(aes(x = 1, y = 0, xend = 0, yend = 0)) + 
  geom_segment(aes(x = .4, y = .6, xend = .37, yend = .635), arrow = arrow(length = unit(.2, "cm")))
p3
@
\caption{hitandrun() goes in the chosen direction until it hits an edge of the simplex. In this figure, the arrow was extended until it hit a wall.}
\end{figure}

\begin{figure}[H]
<<hitandrun walkthrough4, echo = FALSE, warning = FALSE>>=
p4 <- ggplot(data = dat, aes(x = x, y = y)) + geom_point(size = 3) + simpTheme +
  geom_segment(aes(x = 0, y = 0, xend = .5, yend = sqrt(3)/2)) +
  geom_segment(aes(x = .5, y = sqrt(3)/2, xend = 1, yend = 0)) + 
  geom_segment(aes(x = 1, y = 0, xend = 0, yend = 0)) + 
  geom_segment(aes(x = .4, y = .6, xend = .37, yend = .635), arrow = arrow(length = unit(.2, "cm"))) +
  geom_segment(aes(x = .4, y = .6, xend = .88, yend = 0), arrow = arrow(length = unit(.2, "cm")))
p4
@
\caption{Next, hitandrun() goes in the negative direction until it hits another point on the edge of the simplex. This is shown with another arrow.}
\end{figure}

\begin{figure}[H]
<<hitandrun walkthrough5, echo = FALSE, warning = FALSE>>=
p5 <- ggplot(data = dat, aes(x = x, y = y)) + geom_point(size = 3) + 
  geom_point(x = .88, y = 0, size = 3) + 
  geom_point(x = .37, y = 0.635, size = 3) + simpTheme +
  geom_segment(aes(x = 0, y = 0, xend = .5, yend = sqrt(3)/2)) +
  geom_segment(aes(x = .5, y = sqrt(3)/2, xend = 1, yend = 0)) + 
  geom_segment(aes(x = 1, y = 0, xend = 0, yend = 0)) + 
  geom_segment(aes(x = .88, y = 0, xend = .37, yend = .635))
p5
@
\caption{A line segment is formed. It passes through the initial point and connects the two points where the directional arrows intersected the simplex.}
\end{figure}

\begin{figure}[H]
<<hitandrun walkthrough6, echo = FALSE, warning = FALSE>>=
dat2 <- data.frame(x = .7, y = .226)
p6 <- ggplot(data = dat2, aes(x = x, y = y)) + geom_point(size = 3) + 
  simpTheme +
  geom_segment(aes(x = 0, y = 0, xend = .5, yend = sqrt(3)/2)) +
  geom_segment(aes(x = .5, y = sqrt(3)/2, xend = 1, yend = 0)) + 
  geom_segment(aes(x = 1, y = 0, xend = 0, yend = 0)) + 
  geom_segment(aes(x = .88, y = 0, xend = .37, yend = .635))
p6
@
\caption{Finally, a random point is picked on the line segment shown in figure 10.}
\end{figure}

\begin{figure}[H]
<<hitandrun walkthrough7, echo = FALSE, warning = FALSE>>=
A <- matrix(1, ncol = 3)
b = 1

m <- hitandrun(A, b, n = 50, skiplength = 1)[[1]]
plotmirror(m) + simpTheme
@
\caption{hitandrun() then repeats the previous steps, resulting in the creation of many randomized points. This figure displays the outcome of 50 repetitions of the hitandrun algorithm that was just explained.}
\end{figure}

\section*{mirror()}

mirror() is another function used in the process of creating random portfolios.This function also consists of points jumping from one random place to another.

\begin{figure}[H]
<<mirror walkthrough1, echo = FALSE, warning = FALSE>>=
dat <- data.frame(x = .55, y = .65)
p1 <- ggplot(data = dat, aes(x = x, y = y)) + geom_point(size = 3) + geom_point(x = .55, y = 0.65, size = 3) + simpTheme+
  geom_segment(aes(x = 0, y = 0, xend = .5, yend = sqrt(3)/2)) +
  geom_segment(aes(x = .5, y = sqrt(3)/2, xend = 1, yend = 0)) + 
  geom_segment(aes(x = 1, y = 0, xend = 0, yend = 0))
p1
@
\caption{Similar to hitandrun(), mirror() begins by selecting a random point.}
\end{figure}

\begin{figure}[H]
<<mirror walkthrough2, echo = FALSE, warning = FALSE>>=
p2 <- ggplot(data = dat, aes(x = x, y = y)) + geom_point(size = 3) + geom_point(x = .7, y = 0.6, size = 3) + simpTheme+
  geom_segment(aes(x = 0, y = 0, xend = .5, yend = sqrt(3)/2)) +
  geom_segment(aes(x = .5, y = sqrt(3)/2, xend = 1, yend = 0)) + 
  geom_segment(aes(x = 1, y = 0, xend = 0, yend = 0)) +  geom_segment(aes(x = .55, y = .65, xend = .7, yend = .6), arrow = arrow(length = unit(.2, "cm")))
p2
@
\caption{The point then jumps to a random place in space. It does not matter if that point is within or outside of the simplex.}
\end{figure}

\begin{figure}[H]
<<mirror walkthrough3, echo = FALSE, warning = FALSE>>=
p3 <- ggplot(data = dat, aes(x = x, y = y)) + geom_point(size = 3) + geom_point(x = .7, y = 0.6, size = 3) + simpTheme+
  geom_segment(aes(x = 0, y = 0, xend = .5, yend = sqrt(3)/2)) +
  geom_segment(aes(x = .5, y = sqrt(3)/2, xend = 1, yend = 0)) + 
  geom_segment(aes(x = 1, y = 0, xend = 0, yend = 0)) +  geom_segment(aes(x = .55, y = .65, xend = .7, yend = .6), arrow = arrow(length = unit(.2, "cm"))) +
  geom_segment(aes(x = .7, y = .6, xend = .4, yend = .5), arrow = arrow(length = unit(.2, "cm"))) +
  geom_point(x = .4, y = .5, size = 3)
p3
@
\caption{The step displayed in Figure 14 is then repeated.}
\end{figure}

\end{document}

<<hitandrun walkthrough, echo = FALSE, warning = FALSE, fig.width = 5, fig.height = 5>>=
vp = function(x,y) viewport(layout.pos.row = x, layout.pos.col = y)
grid.newpage()
pushViewport(viewport(layout = grid.layout(3, 3, heights = unit(c(7,7,7), "cm"), widths = unit(c(7,7,7), "cm"))))

dat <- data.frame(x = .4, y = .6)
p1 <- ggplot(data = dat, aes(x = x, y = y)) + geom_point(size = 3) + simpTheme +
  geom_segment(aes(x = 0, y = 0, xend = .5, yend = sqrt(3)/2)) +
  geom_segment(aes(x = .5, y = sqrt(3)/2, xend = 1, yend = 0)) + 
  geom_segment(aes(x = 1, y = 0, xend = 0, yend = 0))

p2 <- ggplot(data = dat, aes(x = x, y = y)) + geom_point(size = 3) + simpTheme +
  geom_segment(aes(x = 0, y = 0, xend = .5, yend = sqrt(3)/2)) +
  geom_segment(aes(x = .5, y = sqrt(3)/2, xend = 1, yend = 0)) + 
  geom_segment(aes(x = 1, y = 0, xend = 0, yend = 0)) + 
  geom_segment(aes(x = .4, y = .6, xend = .386, yend = .625), arrow = arrow(length = unit(.2, "cm")))

p3 <- ggplot(data = dat, aes(x = x, y = y)) + geom_point(size = 3) + simpTheme +
  geom_segment(aes(x = 0, y = 0, xend = .5, yend = sqrt(3)/2)) +
  geom_segment(aes(x = .5, y = sqrt(3)/2, xend = 1, yend = 0)) + 
  geom_segment(aes(x = 1, y = 0, xend = 0, yend = 0)) + 
  geom_segment(aes(x = .4, y = .6, xend = .37, yend = .635), arrow = arrow(length = unit(.2, "cm")))

p4 <- ggplot(data = dat, aes(x = x, y = y)) + geom_point(size = 3) + simpTheme +
  geom_segment(aes(x = 0, y = 0, xend = .5, yend = sqrt(3)/2)) +
  geom_segment(aes(x = .5, y = sqrt(3)/2, xend = 1, yend = 0)) + 
  geom_segment(aes(x = 1, y = 0, xend = 0, yend = 0)) + 
  geom_segment(aes(x = .4, y = .6, xend = .37, yend = .635), arrow = arrow(length = unit(.2, "cm"))) +
  geom_segment(aes(x = .4, y = .6, xend = .88, yend = 0), arrow = arrow(length = unit(.2, "cm")))

p5 <- ggplot(data = dat, aes(x = x, y = y)) + geom_point(size = 3) + 
  geom_point(x = .88, y = 0, size = 3) + 
  geom_point(x = .37, y = 0.635, size = 3) + simpTheme +
  geom_segment(aes(x = 0, y = 0, xend = .5, yend = sqrt(3)/2)) +
  geom_segment(aes(x = .5, y = sqrt(3)/2, xend = 1, yend = 0)) + 
  geom_segment(aes(x = 1, y = 0, xend = 0, yend = 0)) + 
  geom_segment(aes(x = .88, y = 0, xend = .x37, yend = .635))

dat2 <- data.frame(x = .7, y = .226)
p6 <- ggplot(data = dat2, aes(x = x, y = y)) + geom_point(size = 3) + 
  simpTheme +
  geom_segment(aes(x = 0, y = 0, xend = .5, yend = sqrt(3)/2)) +
  geom_segment(aes(x = .5, y = sqrt(3)/2, xend = 1, yend = 0)) + 
  geom_segment(aes(x = 1, y = 0, xend = 0, yend = 0)) + 
  geom_segment(aes(x = .88, y = 0, xend = .37, yend = .635))

print(p1, vp = vp(3,1))
print(p2, vp = vp(2,1))
print(p3, vp = vp(3,2))
print(p4, vp = vp(1,1))
print(p5, vp = vp(2,2))
print(p6, vp = vp(3,3))
@

